#include <zephyr/dt-bindings/input/input-event-codes.h>

#define BASE 0
#define LOWER 1
#define UPPER 2
#define FUNC 3
#define CONF 4
#define MOUSE_KEYS 5
#define MOUSE_TP 6
#define MOUSE_TP_KEYS 7
#define MOUSE_TP_SET 8

#ifdef HAS_UROB

#define HAS_TRI_STATE
#define HAS_NUM_WORD

#endif

#define HAS_MOUSE_KEYS
#define HAS_MOUSE_TP
#define HAS_TRI_STATE

// ZMK includes
// Personal includes

#include "includes/mouse_keys.dtsi"
#include "includes/mouse_tp.dtsi"
#include "includes/mouse_tp_badjeff_input_listener.dtsi"
#include <dt-bindings/zmk/mouse.h>
#include "keys_de.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

//#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        tab_dance_layer_shift_fn: tab_dance_layer_shift_fn {
            compatible = "zmk,behavior-tap-dance";
            label = "TAB_DANCE_LAYER_SHIFT_FN";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&mo 5>;
        };

        tf_layer_4_ShiftWinKey: tf_layer_4_ShiftWinKey {
            compatible = "zmk,behavior-tap-dance";
            label = "TF_LAYER_4_SHIFTWINKEY";
            #binding-cells = <0>;
            bindings = <&mo 4>, <&kp LS(LEFT_WIN)>;
        };

        td_space_ShiftWinKey: td_space_ShiftWinKey {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SPACE_SHIFTWINKEY";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&kp LS(LEFT_WIN)>;
        };

        td_N5_F5: td_N5_F5 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_N5_F5";
            #binding-cells = <0>;
            bindings = <&kp DE_N5>, <&kp F5>;
        };

        td_N1_F1_ESC: td_N1_F1_ESC {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_N1_F1_ESC";
            #binding-cells = <0>;
            bindings = <&kp DE_N1>, <&kp F1>, <&kp ESCAPE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&td_N1_F1_ESC              &kp DE_N2  &kp DE_N3  &kp DE_N4  &td_N5_F5  &kp DE_N6                &kp DE_N7              &kp DE_N8  &kp DE_N9     &kp DE_N0      &kp DE_SHARP_S   &kp BACKSPACE
&kp TAB                    &kp DE_Q   &kp DE_W   &kp DE_E   &kp DE_R   &kp DE_T                 &kp DE_Z               &kp DE_U   &kp DE_I      &kp DE_O       &kp DE_P         &kp DE_HASH
&kp DE_LESS_THAN           &kp DE_A   &kp DE_S   &kp DE_D   &kp DE_F   &kp DE_G                 &kp DE_H               &kp DE_J   &kp DE_K      &kp DE_L       &kp DE_O_UMLAUT  &kp ENTER
&tab_dance_layer_shift_fn  &kp DE_Y   &kp DE_X   &kp DE_C   &kp DE_V   &kp DE_B                 &kp DE_N               &kp DE_M   &kp DE_COMMA  &kp DE_PERIOD  &kp DE_MINUS     &tab_dance_layer_shift_fn
&none                      &none                            &mo 2      &tf_layer_4_ShiftWinKey  &td_space_ShiftWinKey  &mo 2                                   &kp DE_PLUS      &mo 3
                           &kp B      &kp A      &none      &kp A      &kp B                    &none                  &kp A      &none         &kp A          &none
            >;
        };

        shift_layer {
            bindings = <
&kp LS(DE_N1)        &kp LS(DE_N2)  &kp LS(DE_N3)  &kp LS(DE_N4)  &kp LS(DE_N5)  &kp LS(DE_N6)  &kp LS(DE_N7)  &kp LS(DE_N8)  &kp LS(DE_N9)     &kp LS(DE_N0)      &kp LS(DE_SHARP_S)   &kp DELETE
&kp TAB              &kp LS(DE_Q)   &kp LS(DE_W)   &kp LS(DE_E)   &kp LS(DE_R)   &kp LS(DE_T)   &kp LS(DE_Z)   &kp LS(DE_U)   &kp LS(DE_I)      &kp LS(DE_O)       &kp LS(DE_P)         &kp LS(DE_HASH)
&kp DE_GREATER_THAN  &kp LS(DE_A)   &kp LS(DE_S)   &kp LS(DE_D)   &kp LS(DE_F)   &kp LS(DE_G)   &kp LS(DE_H)   &kp LS(DE_J)   &kp LS(DE_K)      &kp LS(DE_L)       &kp LS(DE_O_UMLAUT)  &kp ENTER
&none                &kp LS(DE_Y)   &kp LS(DE_X)   &kp LS(DE_C)   &kp LS(DE_V)   &kp LS(DE_B)   &kp LS(DE_N)   &kp LS(DE_M)   &kp LS(DE_COMMA)  &kp LS(DE_PERIOD)  &kp LS(DE_MINUS)     &none
&none                &none                                        &none          &none          &trans         &none                                               &kp LS(DE_PLUS)      &none
                     &kp B          &kp A          &none          &kp A          &kp B          &none          &kp A          &none             &kp A              &none
            >;
        };

        alt_layer {
            bindings = <
&none           &kp LA(DE_SUPER2)  &kp LA(DE_SUPER3)  &kp DE_LEFT_BRACKET      &kp DE_RIGHT_BRACKET      &none  &kp LA(DE_N7)  &kp LA(DE_N8)    &kp LA(DE_N9)   &kp LA(DE_N0)    &kp LA(DE_SHARP_S)  &kp DE_GRAVE
&none           &kp DE_AT_SIGN     &none              &kp DE_LEFT_BRACE        &kp DE_RIGHT_BRACE        &none  &none          &kp DE_U_UMLAUT  &kp UP_ARROW    &kp DE_O_UMLAUT  &none               &kp INS
&kp DE_PIPE     &kp DE_A_UMLAUT    &none              &kp DE_LEFT_PARENTHESIS  &kp DE_RIGHT_PARENTHESIS  &none  &none          &kp LEFT_ARROW   &kp DOWN_ARROW  &kp RIGHT_ARROW  &none               &none
&kp LEFT_SHIFT  &none              &none              &none                    &none                     &none  &none          &kp DE_MICRO     &none           &none            &none               &none
&none           &none                                                          &none                     &none  &trans         &none                                             &kp DE_TILDE        &none
                &none              &kp C_BRI_DN       &none                    &kp C_BRI_UP              &none  &none          &none            &none           &none            &none
            >;
        };

        config_layer {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none  &ext_power EP_ON             &ext_power EP_OFF       &none                        &none                          &none  &mms MS_RESET
&bt BT_NXT    &none           &none         &none         &none         &none  &mms MS_TP_SENSITIVITY_INCR  &mms MS_TP_VALUE6_INCR  &mms MS_TP_NEG_INERTIA_INCR  &mms MS_TP_PTS_THRESHOLD_INCR  &none  &none
&none         &bt BT_CLR_ALL  &none         &none         &none         &none  &mms MS_TP_SENSITIVITY_DECR  &mms MS_TP_VALUE6_DECR  &mms MS_TP_NEG_INERTIA_DECR  &mms MS_TP_PTS_THRESHOLD_DECR  &none  &mms MS_LOG
&none         &none           &none         &bt BT_CLR    &none         &none  &none                        &none                   &none                        &none                          &none  &none
&none         &none                                       &none         &none  &bootloader                  &none                                                                               &none  &none
              &none           &none         &none         &none         &none  &none                        &none                   &none                        &none                          &none
            >;
        };

        MouseKeys_layer {
            bindings = <
&none           &none  &none      &none      &none      &none           &none      &none           &none           &none            &none  &none
&none           &none  &none      &none      &none      &none           &none      &none           &mmv MOVE_UP    &none            &none  &none
&mkp MB4        &none  &mkp RCLK  &mkp MCLK  &mkp LCLK  &msc SCRL_UP    &none      &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none  &none
&kp LEFT_SHIFT  &none  &none      &none      &none      &msc SCRL_DOWN  &none      &none           &none           &none            &none  &none
&bootloader     &none                        &none      &none           &kp RCTRL  &kp RIGHT_ALT                                    &none  &none
                &none  &none      &none      &none      &none           &none      &none           &none           &none            &none
            >;
        };

        function_layer {
            bindings = <
&kp F1              &kp F2      &kp F3     &kp F4     &kp F5     &kp F6     &kp F7     &kp F8     &kp F9     &kp F10    &kp F11  &kp F12
&kp TAB             &kp LC(Q)   &kp LC(W)  &kp LC(E)  &kp LC(R)  &kp LC(T)  &kp LC(Z)  &kp LC(U)  &kp LC(I)  &kp LC(O)  &trans   &trans
&kp LA(LC(DELETE))  &kp LC(A)   &kp LC(S)  &kp LC(D)  &kp LC(F)  &kp LC(G)  &kp LC(H)  &kp LC(J)  &kp LC(K)  &kp LC(L)  &trans   &trans
&kp LS(LC(ESCAPE))  &kp LC(Y)   &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(B)  &kp LC(N)  &kp LC(M)  &trans     &trans     &trans   &none
&none               &kp ESCAPE                        &none      &none      &none      &none                            &none    &none
                    &trans      &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans     &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
